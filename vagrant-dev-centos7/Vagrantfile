# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'yaml'
vagrantConfig = YAML.load_file 'Vagrantfile.config.yml'

# Config
Vagrant.configure(2) do |config|

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "centos/7"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: vagrantConfig['ip']

  ## Mount local "./shared/" patho into boxÂ´s "/vagrant-box-shared" path
  # config.vm.synced_folder ".", "/vagrant", type: "nfs", disabled: true
  config.vm.synced_folder ".", "/home/vagrant/sync", disabled: true
  config.vm.synced_folder vagrantConfig['synced_folder']['host_path'], vagrantConfig['synced_folder']['guest_path'], owner:"vagrant"#, group: "apache", mount_options:['dmode=775', 'fmode=664']

  # Provider-specific configuration
  config.vm.provider "virtualbox" do |vb|
    vb.gui = false
    vb.cpus = 2
    vb.memory = "4096"
  end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   sudo apt-get update
  #   sudo apt-get install -y apache2
  # SHELL
  #

  # update
  config.vm.provision "shell", inline: "sudo yum -y update"

  # disbale selinux
  config.vm.provision "shell", inline: "sudo sed -i 's/enforcing/disabled/g' /etc/selinux/config /etc/selinux/config"
  config.vm.provision "shell", inline: "sudo setenforce 0"

  # set system timezone
  config.vm.provision "shell", inline: "sudo timedatectl set-timezone #{vagrantConfig['magento']['timezone']}"

  # Install Command Line Web Browser
  config.vm.provision "shell", inline: "sudo yum -y install links wget"

  # PHP
  config.vm.provision "shell", inline: "sudo yum -y install epel-release"
  config.vm.provision "shell", inline: "sudo yum -y install http://dl.iuscommunity.org/pub/ius/stable/CentOS/7/x86_64/ius-release-1.0-14.ius.centos7.noarch.rpm"
  config.vm.provision "shell", inline: "sudo yum -y update"
  # PHP 7 -> php version 7.0.5 is not working with magento2
  # config.vm.provision "shell", inline: "sudo yum -y install php70u php70u-pdo php70u-mysqlnd php70u-opcache php70u-xml php70u-mcrypt php70u-gd php70u-devel php70u-mysql php70u-intl php70u-mbstring php70u-json php70u-iconv"
  # PHP 5.6
  config.vm.provision "shell", inline: "sudo yum -y install php56u php56u-pdo php56u-mysqlnd php56u-opcache php56u-xml php56u-mcrypt php56u-gd php56u-devel php56u-mysql php56u-intl php56u-mbstring php56u-json php56u-iconv"
  # show version and set timezone
  config.vm.provision "shell", inline: "php -v"
  config.vm.provision "shell", inline: "sudo sed -i \"s|;date.timezone =.*|date.timezone = \\\"#{vagrantConfig['magento']['timezone']}\\\"|\" /etc/php.ini"

  # MySQL 5.6
  config.vm.provision "shell", path: "./scripts/03_install_mysql56.sh", args: "#{vagrantConfig['mysql']['password']}"

  # apache
  config.vm.provision "shell", inline: "sudo yum install httpd"
  config.vm.provision "shell", inline: "httpd -v"
  config.vm.provision "shell", inline: "sudo systemctl start httpd.service"
  config.vm.provision "shell", inline: "sudo systemctl enable httpd.service"
  config.vm.provision "shell", inline: "awk '/<Directory \\/var\\/www\\/html\\/>/,/AllowOverride None/{sub(\"None\", \"All\",$0)}{print}' /etc/httpd/conf/httpd.conf > /tmp/tmp.httpd.conf"
  config.vm.provision "shell", inline: "sudo mv /tmp/tmp.httpd.conf /etc/httpd/conf/httpd.conf"
  # config.vm.provision "shell", inline: "sudo systemctl stop httpd.service"
  config.vm.provision "shell", inline: "sudo usermod -g apache vagrant"
  # config.vm.provision "shell", inline: "sudo systemctl start httpd.service"

  # magento2

  # set memeory limit for development
  config.vm.provision "shell", inline: "sudo sed -i \"s|memory_limit =.*|memory_limit = 2G|\" /etc/php.ini"

  # init magento2 with composer in html folder
  config.vm.provision "shell", inline: "curl -sS https://getcomposer.org/installer | php"
  config.vm.provision "shell", inline: "mv composer.phar /usr/local/bin/composer"
  config.vm.provision "shell", inline: "/usr/local/bin/composer -V"
  config.vm.provision "shell", inline: "/usr/local/bin/composer clearcache"
  config.vm.provision "shell", inline: "sudo rm -f /root/.composer/auth.json"
  # config.vm.provision "shell", inline: "echo '{\"http-basic\": {\"repo.magento.com\": {\"username\": \"#{vagrantConfig['http_basic']['repo_magento_com']['username']}\",\"password\": \"#{vagrantConfig['http_basic']['repo_magento_com']['password']}\"}}}' >> /root/.composer/auth.json"
  config.vm.provision "shell", inline: "echo '{\"http-basic\": {\"repo.magento.com\": {\"username\": \"#{vagrantConfig['http_basic']['repo_magento_com']['username']}\",\"password\": \"#{vagrantConfig['http_basic']['repo_magento_com']['password']}\"}}, \"github-oauth\": {\"github.com\":\"#{vagrantConfig['github_oauth']['github_com']}\"}}' >> /root/.composer/auth.json"

  # clear and link html folder
  config.vm.provision "shell", inline: "rm -r /var/www/html"
  config.vm.provision "shell", inline: "sudo ln -s #{vagrantConfig['synced_folder']['guest_path']} /var/www/html"

  # Set file system ownership and permissions
  config.vm.provision "shell", inline: "sudo chown -R :apache #{vagrantConfig['synced_folder']['guest_path']}"

  # create project
  config.vm.provision "shell", inline: "/usr/local/bin/composer create-project --repository-url=https://repo.magento.com/ magento/project-community-edition /var/www/html/"
  config.vm.provision "shell", inline: "sudo find #{vagrantConfig['synced_folder']['guest_path']} -type d -exec chmod 770 {} \\; && sudo find #{vagrantConfig['synced_folder']['guest_path']} -type f -exec chmod 660 {} \\; && sudo chmod u+x /var/www/html/bin/magento"

  # add phpifo for dev
  config.vm.provision "shell", inline: "echo -e \"<?php\nphpinfo();\n?>\"  > /var/www/html/phpinfo.php"

  # create a database in which Magento will be installed later on
  config.vm.provision "shell", inline: "sudo mysql --user=#{vagrantConfig['mysql']['username']} --password=#{vagrantConfig['mysql']['password']} -e \"CREATE DATABASE #{vagrantConfig['magento']['db_name']};\""

  # run the Magento installation from the command line
  config.vm.provision "shell", inline: "php /var/www/html/bin/magento setup:install --base-url=\"#{vagrantConfig['magento']['base_url']}\" --db-host=\"#{vagrantConfig['mysql']['host']}\" --db-user=\"#{vagrantConfig['mysql']['username']}\" --db-password=\"#{vagrantConfig['mysql']['password']}\" --db-name=\"#{vagrantConfig['magento']['db_name']}\" --admin-firstname=\"#{vagrantConfig['magento']['admin_firstname']}\" --admin-lastname=\"#{vagrantConfig['magento']['admin_lastname']}\" --admin-email=\"#{vagrantConfig['magento']['admin_email']}\" --admin-user=\"#{vagrantConfig['magento']['admin_user']}\" --admin-password=\"#{vagrantConfig['magento']['admin_password']}\" --backend-frontname=\"#{vagrantConfig['magento']['backend_frontname']}\" --language=\"#{vagrantConfig['magento']['language']}\" --currency=\"#{vagrantConfig['magento']['currency']}\" --timezone=\"#{vagrantConfig['magento']['timezone']}\""

  config.vm.provision "shell", inline: "php /var/www/html/bin/magento deploy:mode:set developer"
  config.vm.provision "shell", inline: "php /var/www/html/bin/magento cache:disable"
  config.vm.provision "shell", inline: "php /var/www/html/bin/magento cache:flush"
  config.vm.provision "shell", inline: "php /var/www/html/bin/magento setup:performance:generate-fixtures /var/www/html/setup/performance-toolkit/profiles/ce/#{vagrantConfig['magento']['fixture']}.xml"
  config.vm.provision "shell", inline: "php /var/www/html/bin/magento setup:static-content:deploy de_DE en_US"

end